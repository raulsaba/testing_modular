// Mocks generated by Mockito 5.3.2 from annotations
// in testing_modular/test/app/modules/crud/crud_module_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:ui' as _i15;

import 'package:bloc/bloc.dart' as _i17;
import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter/material.dart' as _i14;
import 'package:flutter_modular/src/presenter/models/modular_navigator.dart'
    as _i11;
import 'package:flutter_modular/src/presenter/models/route.dart' as _i12;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i7;
import 'package:testing_modular/app/config/config.dart' as _i4;
import 'package:testing_modular/app/core/error/failure.dart' as _i19;
import 'package:testing_modular/app/core/network/network_info.dart' as _i8;
import 'package:testing_modular/app/core/usecases/usecase.dart' as _i24;
import 'package:testing_modular/app/modules/crud/data/external/datasource/crud_local_data_source.dart'
    as _i10;
import 'package:testing_modular/app/modules/crud/data/external/datasource/crud_remote_data_source.dart'
    as _i9;
import 'package:testing_modular/app/modules/crud/data/models/crud_model.dart'
    as _i6;
import 'package:testing_modular/app/modules/crud/data/repositories/crud_repository_impl.dart'
    as _i26;
import 'package:testing_modular/app/modules/crud/domain/entities/crud_entity.dart'
    as _i20;
import 'package:testing_modular/app/modules/crud/domain/repositories/crud_repository.dart'
    as _i2;
import 'package:testing_modular/app/modules/crud/domain/usecases/create.dart'
    as _i25;
import 'package:testing_modular/app/modules/crud/domain/usecases/delete.dart'
    as _i21;
import 'package:testing_modular/app/modules/crud/domain/usecases/index.dart'
    as _i23;
import 'package:testing_modular/app/modules/crud/domain/usecases/show.dart'
    as _i22;
import 'package:testing_modular/app/modules/crud/domain/usecases/update.dart'
    as _i18;
import 'package:testing_modular/app/modules/crud/presentation/bloc/crud_bloc.dart'
    as _i16;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCrudRepository_0 extends _i1.SmartFake
    implements _i2.CrudRepository {
  _FakeCrudRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfig_2 extends _i1.SmartFake implements _i4.Config {
  _FakeConfig_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_3 extends _i1.SmartFake implements _i5.Client {
  _FakeClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCrudModel_4 extends _i1.SmartFake implements _i6.CrudModel {
  _FakeCrudModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_5 extends _i1.SmartFake
    implements _i7.SharedPreferences {
  _FakeSharedPreferences_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfo_6 extends _i1.SmartFake implements _i8.NetworkInfo {
  _FakeNetworkInfo_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCrudRemoteDataSourceImpl_7 extends _i1.SmartFake
    implements _i9.CrudRemoteDataSourceImpl {
  _FakeCrudRemoteDataSourceImpl_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCrudLocalDataSourceImpl_8 extends _i1.SmartFake
    implements _i10.CrudLocalDataSourceImpl {
  _FakeCrudLocalDataSourceImpl_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IModularNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockIModularNavigator extends _i1.Mock implements _i11.IModularNavigator {
  MockIModularNavigator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  List<_i12.ParallelRoute<dynamic>> get navigateHistory => (super.noSuchMethod(
        Invocation.getter(#navigateHistory),
        returnValue: <_i12.ParallelRoute<dynamic>>[],
      ) as List<_i12.ParallelRoute<dynamic>>);
  @override
  _i13.Future<T?> push<T extends Object?>(_i14.Route<T>? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #push,
          [route],
        ),
        returnValue: _i13.Future<T?>.value(),
      ) as _i13.Future<T?>);
  @override
  _i13.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #popAndPushNamed,
          [routeName],
          {
            #result: result,
            #arguments: arguments,
            #forRoot: forRoot,
          },
        ),
        returnValue: _i13.Future<T?>.value(),
      ) as _i13.Future<T?>);
  @override
  _i13.Future<T?> pushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamed,
          [routeName],
          {
            #arguments: arguments,
            #forRoot: forRoot,
          },
        ),
        returnValue: _i13.Future<T?>.value(),
      ) as _i13.Future<T?>);
  @override
  _i13.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    bool Function(_i14.Route<dynamic>)? predicate, {
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [
            newRouteName,
            predicate,
          ],
          {
            #arguments: arguments,
            #forRoot: forRoot,
          },
        ),
        returnValue: _i13.Future<T?>.value(),
      ) as _i13.Future<T?>);
  @override
  _i13.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushReplacementNamed,
          [routeName],
          {
            #result: result,
            #arguments: arguments,
            #forRoot: forRoot,
          },
        ),
        returnValue: _i13.Future<T?>.value(),
      ) as _i13.Future<T?>);
  @override
  void pop<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool canPop() => (super.noSuchMethod(
        Invocation.method(
          #canPop,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i13.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybePop,
          [result],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);
  @override
  void popUntil(bool Function(_i14.Route<dynamic>)? predicate) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigate(
    String? path, {
    dynamic arguments,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #navigate,
          [path],
          {#arguments: arguments},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setObservers(List<_i14.NavigatorObserver>? navigatorObservers) =>
      super.noSuchMethod(
        Invocation.method(
          #setObservers,
          [navigatorObservers],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setNavigatorKey(_i14.GlobalKey<_i14.NavigatorState>? navigatorkey) =>
      super.noSuchMethod(
        Invocation.method(
          #setNavigatorKey,
          [navigatorkey],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i15.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i15.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CrudBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrudBloc extends _i1.Mock implements _i16.CrudBloc {
  MockCrudBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: 0,
      ) as int);
  @override
  _i13.Stream<int> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<int>.empty(),
      ) as _i13.Stream<int>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i13.Stream<int> mapEventToState(_i16.CrudEvent? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #mapEventToState,
          [event],
        ),
        returnValue: _i13.Stream<int>.empty(),
      ) as _i13.Stream<int>);
  @override
  void add(_i16.CrudEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i16.CrudEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(int? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i16.CrudEvent>(
    _i17.EventHandler<E, int>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(_i17.Transition<_i16.CrudEvent, int>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
  @override
  void onChange(_i17.Change<int>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Update].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdate extends _i1.Mock implements _i18.Update {
  MockUpdate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CrudRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCrudRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CrudRepository);
  @override
  _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>> call(
          _i18.UpdateParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>.value(
            _FakeEither_1<_i19.Failure, _i20.Crud>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>);
}

/// A class which mocks [Delete].
///
/// See the documentation for Mockito's code generation for more information.
class MockDelete extends _i1.Mock implements _i21.Delete {
  MockDelete() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CrudRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCrudRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CrudRepository);
  @override
  _i13.Future<_i3.Either<_i19.Failure, bool>> call(_i21.DeleteParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13.Future<_i3.Either<_i19.Failure, bool>>.value(
            _FakeEither_1<_i19.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i19.Failure, bool>>);
}

/// A class which mocks [Show].
///
/// See the documentation for Mockito's code generation for more information.
class MockShow extends _i1.Mock implements _i22.Show {
  MockShow() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CrudRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCrudRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CrudRepository);
  @override
  _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>> call(
          _i22.ShowParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>.value(
            _FakeEither_1<_i19.Failure, _i20.Crud>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>);
}

/// A class which mocks [Index].
///
/// See the documentation for Mockito's code generation for more information.
class MockIndex extends _i1.Mock implements _i23.Index {
  MockIndex() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CrudRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCrudRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CrudRepository);
  @override
  _i13.Future<_i3.Either<_i19.Failure, List<_i20.Crud>>> call(
          _i24.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i13.Future<_i3.Either<_i19.Failure, List<_i20.Crud>>>.value(
                _FakeEither_1<_i19.Failure, List<_i20.Crud>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i19.Failure, List<_i20.Crud>>>);
}

/// A class which mocks [Create].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreate extends _i1.Mock implements _i25.Create {
  MockCreate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CrudRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCrudRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CrudRepository);
  @override
  _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>> call(
          _i25.CreateParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>.value(
            _FakeEither_1<_i19.Failure, _i20.Crud>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>);
}

/// A class which mocks [CrudRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrudRemoteDataSourceImpl extends _i1.Mock
    implements _i9.CrudRemoteDataSourceImpl {
  MockCrudRemoteDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Config get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeConfig_2(
          this,
          Invocation.getter(#config),
        ),
      ) as _i4.Config);
  @override
  _i5.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_3(
          this,
          Invocation.getter(#client),
        ),
      ) as _i5.Client);
  @override
  _i13.Future<_i6.CrudModel> create(_i6.CrudModel? crudModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [crudModel],
        ),
        returnValue: _i13.Future<_i6.CrudModel>.value(_FakeCrudModel_4(
          this,
          Invocation.method(
            #create,
            [crudModel],
          ),
        )),
      ) as _i13.Future<_i6.CrudModel>);
  @override
  _i13.Future<bool> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);
  @override
  _i13.Future<List<_i6.CrudModel>> index() => (super.noSuchMethod(
        Invocation.method(
          #index,
          [],
        ),
        returnValue: _i13.Future<List<_i6.CrudModel>>.value(<_i6.CrudModel>[]),
      ) as _i13.Future<List<_i6.CrudModel>>);
  @override
  _i13.Future<_i6.CrudModel> show(int? id) => (super.noSuchMethod(
        Invocation.method(
          #show,
          [id],
        ),
        returnValue: _i13.Future<_i6.CrudModel>.value(_FakeCrudModel_4(
          this,
          Invocation.method(
            #show,
            [id],
          ),
        )),
      ) as _i13.Future<_i6.CrudModel>);
  @override
  _i13.Future<_i6.CrudModel> update(
    int? id,
    _i6.CrudModel? crudModel,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            crudModel,
          ],
        ),
        returnValue: _i13.Future<_i6.CrudModel>.value(_FakeCrudModel_4(
          this,
          Invocation.method(
            #update,
            [
              id,
              crudModel,
            ],
          ),
        )),
      ) as _i13.Future<_i6.CrudModel>);
}

/// A class which mocks [CrudLocalDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrudLocalDataSourceImpl extends _i1.Mock
    implements _i10.CrudLocalDataSourceImpl {
  MockCrudLocalDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.SharedPreferences get sharedPreferences => (super.noSuchMethod(
        Invocation.getter(#sharedPreferences),
        returnValue: _FakeSharedPreferences_5(
          this,
          Invocation.getter(#sharedPreferences),
        ),
      ) as _i7.SharedPreferences);
  @override
  _i13.Future<bool> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);
  @override
  _i13.Future<List<_i6.CrudModel>> getCrudListFromCache() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCrudListFromCache,
          [],
        ),
        returnValue: _i13.Future<List<_i6.CrudModel>>.value(<_i6.CrudModel>[]),
      ) as _i13.Future<List<_i6.CrudModel>>);
  @override
  _i13.Future<bool> saveCrudListOnCache(List<_i6.CrudModel>? crudModelList) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCrudListOnCache,
          [crudModelList],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);
}

/// A class which mocks [CrudRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrudRepositoryImpl extends _i1.Mock
    implements _i26.CrudRepositoryImpl {
  MockCrudRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_6(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i8.NetworkInfo);
  @override
  _i9.CrudRemoteDataSourceImpl get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeCrudRemoteDataSourceImpl_7(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i9.CrudRemoteDataSourceImpl);
  @override
  _i10.CrudLocalDataSourceImpl get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakeCrudLocalDataSourceImpl_8(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i10.CrudLocalDataSourceImpl);
  @override
  _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>> createCrud(
          _i20.Crud? crud) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCrud,
          [crud],
        ),
        returnValue: _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>.value(
            _FakeEither_1<_i19.Failure, _i20.Crud>(
          this,
          Invocation.method(
            #createCrud,
            [crud],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>);
  @override
  _i13.Future<_i3.Either<_i19.Failure, bool>> deleteCrud(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCrud,
          [id],
        ),
        returnValue: _i13.Future<_i3.Either<_i19.Failure, bool>>.value(
            _FakeEither_1<_i19.Failure, bool>(
          this,
          Invocation.method(
            #deleteCrud,
            [id],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i19.Failure, bool>>);
  @override
  _i13.Future<_i3.Either<_i19.Failure, List<_i20.Crud>>> indexCrud() =>
      (super.noSuchMethod(
        Invocation.method(
          #indexCrud,
          [],
        ),
        returnValue:
            _i13.Future<_i3.Either<_i19.Failure, List<_i20.Crud>>>.value(
                _FakeEither_1<_i19.Failure, List<_i20.Crud>>(
          this,
          Invocation.method(
            #indexCrud,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i19.Failure, List<_i20.Crud>>>);
  @override
  _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>> showCrud(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCrud,
          [id],
        ),
        returnValue: _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>.value(
            _FakeEither_1<_i19.Failure, _i20.Crud>(
          this,
          Invocation.method(
            #showCrud,
            [id],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>);
  @override
  _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>> updateCrud(
    int? id,
    _i20.Crud? crud,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCrud,
          [
            id,
            crud,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>.value(
            _FakeEither_1<_i19.Failure, _i20.Crud>(
          this,
          Invocation.method(
            #updateCrud,
            [
              id,
              crud,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i19.Failure, _i20.Crud>>);
}
